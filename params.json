{"name":"TA-Lib","tagline":"Python wrapper for TA-Lib (http://ta-lib.org/).","body":"# TA-Lib\r\n\r\nFrom [TA-LIB's](http://ta-lib.org) homepage:\r\n\r\n> TA-Lib is widely used by trading software developers requiring to perform\r\n> technical analysis of financial market data.\r\n\r\n> * Includes 200 indicators such as ADX, MACD, RSI, Stochastic, Bollinger\r\n>   Bands, etc.\r\n> * Candlestick pattern recognition\r\n> * Open-source API for C/C++, Java, Perl, Python and 100% Managed .NET\r\n\r\nUnfortunately, the included Python bindings use [SWIG](http://swig.org),\r\nare a little difficult to install (particularly on Mac OS X), and aren't as\r\nefficient as they could be. This project uses Cython and Numpy to efficiently\r\nand cleanly bind to TA-Lib -- producing results 2-4 times faster than the SWIG\r\ninterface.\r\n\r\n## Installation\r\n\r\nYou can install from PyPI:\r\n\r\n```\r\n$ easy_install TA-Lib\r\n```\r\n\r\nOr checkout the sources and run ``setup.py`` yourself:\r\n\r\n```\r\n$ python setup.py install\r\n```\r\n\r\nNote: this requires that you have already installed the ``TA-Lib`` library\r\non your computer (you can [download it](http://ta-lib.org/hdr_dw.html) or\r\nuse your computer's package manager to install it, e.g.,\r\n``brew install ta-lib`` on Mac OS X).  On Windows, you can download the\r\n[ta-lib-0.4.0-msvc.zip](http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-msvc.zip)\r\nand unzip to ``C:\\ta-lib``.\r\n\r\n\r\n## Troubleshooting\r\n\r\nIf you get build errors like this, it typically means that it can't find the\r\nunderlying ``TA-Lib`` library and needs to be installed:\r\n\r\n```\r\nfunc.c:256:28: fatal error: ta-lib/ta_libc.h: No such file or directory\r\ncompilation terminated.\r\n```\r\n\r\nIf you install ``TA-Lib`` manually using ``make -jX``, the build will fail but\r\nit's OK! Simply rerun ``make -jX`` followed by ``[sudo] make install`` and\r\neverything will work as expected.\r\n\r\n\r\n## Function API Examples\r\n\r\nSimilar to TA-Lib, the function interface provides a lightweight wrapper of\r\nthe exposed TA-Lib indicators.\r\n\r\nEach function returns an output array and have default values for their\r\nparameters, unless specified as keyword arguments. Typically, these functions\r\nwill have an initial \"lookback\" period (a required number of observations\r\nbefore an output is generated) set to ``NaN``.\r\n\r\nAll of the following examples use the function API:\r\n\r\n```python\r\nimport numpy\r\nimport talib\r\n\r\nclose = numpy.random.random(100)\r\n```\r\n\r\nCalculate a simple moving average of the close prices:\r\n\r\n```python\r\noutput = talib.SMA(close)\r\n```\r\n\r\nCalculating bollinger bands, with triple exponential moving average:\r\n\r\n```python\r\nfrom talib import MA_Type\r\n\r\nupper, middle, lower = talib.BBANDS(close, matype=MA_Type.T3)\r\n```\r\n\r\nCalculating momentum of the close prices, with a time period of 5:\r\n\r\n```python\r\noutput = talib.MOM(close, timeperiod=5)\r\n```\r\n\r\n## Abstract API Examples\r\n\r\nTA-Lib also provides an abstract interface for calling functions. Our\r\nwrapper for the abstract interface is somewhat different from the upstream\r\nimplementation. The abstract interface is designed to make the TA-Lib easily\r\nintrospectable and dynamically programmable. Of course Python allows for\r\nthese things too, but this helps do some of the heavy lifting for you, making\r\nit much easier to for example add a TA-Lib indicator control panel to a\r\nGUI charting program. It also unifies the interface for using and calling\r\nfunctions making life easier on the developer.\r\n\r\nIf you're already familiar with using the function API, you should feel right\r\nat home using the abstract API. Every function takes the same input, passed\r\nas a dictionary of observed values:\r\n\r\n```python\r\nimport numpy as np\r\n# note that all ndarrays must be the same length!\r\ninputs = {\r\n    'open': np.random.random(100),\r\n    'high': np.random.random(100),\r\n    'low': np.random.random(100),\r\n    'close': np.random.random(100),\r\n    'volume': np.random.random(100)\r\n}\r\n```\r\n\r\nFrom this input data, let's again calculate a simple moving average (SMA),\r\nthis time with the abstract interface:\r\n\r\n```python\r\nfrom talib.abstract import Function\r\noutput = Function('sma', input_arrays).outputs\r\n\r\n# teaser:\r\noutput = Function('sma')(input_arrays, timeperiod=20, price='close')\r\nupper, middle, lower = Function('bbands')(input_arrays, 20, 2, 2)\r\nprint Function('STOCH').info\r\n```\r\n\r\nYou'll notice a few things are different. The function is now a class,\r\ninitialized with any supported function name (case insensitive) and optionally\r\n``input_arrays``. To run the TA function with our input data, we access the\r\n``outputs`` property. It wraps a method that ensures the results are always\r\nvalid so long as the ``input_arrays`` dict was already set. Speaking of which,\r\nthe SMA function only takes one input, and we gave it five!\r\n\r\nCertain TA functions define which price series names they expect for input.\r\nOthers, like SMA, don't (we'll explain how to figure out which in a moment).\r\n``Function`` will use the closing prices by default on TA functions that take\r\none undefined input, or the high and the low prices for functions taking two.\r\nWe can override the default like so:\r\n\r\n```python\r\nsma = Function('sma', input_arrays)\r\nsma.set_function_args(timeperiod=10, price='open')\r\noutput = sma.outputs\r\n```\r\n\r\nThis works by using keyword arguments. For functions with one undefined input,\r\nthe keyword is ``price``; for two they are ``price0`` and ``price1``. That's a\r\nlot of typing; let's introduce some shortcuts:\r\n\r\n```python\r\noutput = Function('sma').run(input_arrays)\r\noutput = Function('sma')(input_arrays, price='open')\r\n```\r\n\r\nThe ``run()`` method is a shortcut to ``outputs`` that also optionally accepts\r\nan ``input_arrays`` dict to use for calculating the function values. You can\r\nalso call the ``Function`` instance directly; this shortcut to ``outputs``\r\nallows setting both ``input_arrays`` and/or any function parameters and\r\nkeywords. These methods make up all the ways you can call the TA function and\r\nget its values.\r\n\r\n``Function.outputs`` returns either a single ndarray or a list of ndarrays,\r\ndepending on how many outputs the TA function has. This information can be\r\nfound through ``Function.output_names`` or ``Function.info['outputs']``.\r\n\r\n``Function.info`` is a very useful property. It returns a dict with almost\r\nevery detail of the current state of the ``Function`` instance:\r\n\r\n```python\r\nprint Function('stoch').info\r\n{\r\n  'name': 'STOCH',\r\n  'display_name': 'Stochastic',\r\n  'group': 'Momentum Indicators',\r\n  'input_names': OrderedDict([\r\n    ('prices', ['high', 'low', 'close']),\r\n  ]),\r\n  'parameters': OrderedDict([\r\n    ('fastk_period', 5),\r\n    ('slowk_period', 3),\r\n    ('slowk_matype', 0),\r\n    ('slowd_period', 3),\r\n    ('slowd_matype', 0),\r\n  ]),\r\n  'output_names': ['slowk', 'slowd'],\r\n  'flags': None,\r\n}\r\n```\r\n\r\nTake a look at the value of the ``input_names`` key. There's only one input\r\nprice variable, 'prices', and its value is a list of price series names.\r\nThis is one of those TA functions where TA-Lib defines which price series it\r\nexpects for input. Any time ``input_names`` is an OrderedDict with one key,\r\n``prices``, and a list for a value, it means TA-Lib defined the expected price\r\nseries names. You can override these just the same as undefined inputs, just\r\nmake sure to use a list with the correct number of price series names! (it\r\nvaries across functions)\r\n\r\nYou can also use ``Function.input_names`` to get/set the price series names,\r\nand ``Function.parameters`` to get/set the function parameters. Let's expand\r\non the other ways to set TA function arguments:\r\n\r\n```python\r\nfrom talib import MA_Type\r\n\r\noutput = Function('sma')(input_arrays, timeperiod=10, price='high')\r\n\r\nupper, middle, lower = Function('bbands')(input_arrays, timeperiod=20, matype=MA_Type.EMA)\r\n\r\nstoch = Function('stoch', input_arrays)\r\nstoch.set_function_args(slowd_period=5)\r\nslowk, slowd = stoch(15, fastd_period=5) # 15 == fastk_period specified positionally\r\n```\r\n\r\n``input_arrays`` must be passed as a positional argument (or left out\r\nentirely). TA function parameters can be passed as positional or keyword\r\narguments. Input price series names must be passed as keyword arguments (or\r\nleft out entirely). In fact, the ``__call__`` method of ``Function`` simply\r\ncalls ``set_function_args()``.\r\n\r\nFor your convenience, we create ``Function`` wrappers for all of the available\r\nTA-Lib functions:\r\n\r\n```python\r\nfrom talib.abstract import SMA, BBANDS, STOCH\r\n\r\noutput = SMA(input_arrays)\r\n\r\nupper, middle, lower = BBANDS(input_arrays, timeperiod=20)\r\n\r\nslowk, slowd = STOCH(input_arrays, fastk_period=15, fastd_period=5)\r\n```\r\n\r\n## Indicators\r\n\r\nWe can show all the TA functions supported by TA-Lib, either as a ``list`` or\r\nas a ``dict`` sorted by group (e.g. \"Overlap Studies\", \"Momentum Indicators\",\r\netc):\r\n\r\n```python\r\nimport talib\r\n\r\nprint talib.get_functions()\r\nprint talib.get_function_groups()\r\n```\r\n\r\nHere are some of the included indicators:\r\n\r\n```\r\nAD                  Chaikin A/D Line\r\nADOSC               Chaikin A/D Oscillator\r\nADX                 Average Directional Movement Index\r\nADXR                Average Directional Movement Index Rating\r\nAPO                 Absolute Price Oscillator\r\nAROON               Aroon\r\nAROONOSC            Aroon Oscillator\r\nATR                 Average True Range\r\nAVGPRICE            Average Price\r\nBBANDS              Bollinger Bands\r\nBETA                Beta\r\nBOP                 Balance Of Power\r\nCCI                 Commodity Channel Index\r\nCDL2CROWS           Two Crows\r\nCDL3BLACKCROWS      Three Black Crows\r\nCDL3INSIDE          Three Inside Up/Down\r\nCDL3LINESTRIKE      Three-Line Strike \r\nCDL3OUTSIDE         Three Outside Up/Down\r\nCDL3STARSINSOUTH    Three Stars In The South\r\nCDL3WHITESOLDIERS   Three Advancing White Soldiers\r\nCDLABANDONEDBABY    Abandoned Baby\r\nCDLADVANCEBLOCK     Advance Block\r\nCDLBELTHOLD         Belt-hold\r\nCDLBREAKAWAY        Breakaway\r\nCDLCLOSINGMARUBOZU  Closing Marubozu\r\nCDLCONCEALBABYSWALL Concealing Baby Swallow\r\nCDLCOUNTERATTACK    Counterattack\r\nCDLDARKCLOUDCOVER   Dark Cloud Cover\r\nCDLDOJI             Doji\r\nCDLDOJISTAR         Doji Star\r\nCDLDRAGONFLYDOJI    Dragonfly Doji\r\nCDLENGULFING        Engulfing Pattern\r\nCDLEVENINGDOJISTAR  Evening Doji Star\r\nCDLEVENINGSTAR      Evening Star\r\nCDLGAPSIDESIDEWHITE Up/Down-gap side-by-side white lines\r\nCDLGRAVESTONEDOJI   Gravestone Doji\r\nCDLHAMMER           Hammer\r\nCDLHANGINGMAN       Hanging Man\r\nCDLHARAMI           Harami Pattern\r\nCDLHARAMICROSS      Harami Cross Pattern\r\nCDLHIGHWAVE         High-Wave Candle\r\nCDLHIKKAKE          Hikkake Pattern\r\nCDLHIKKAKEMOD       Modified Hikkake Pattern\r\nCDLHOMINGPIGEON     Homing Pigeon\r\nCDLIDENTICAL3CROWS  Identical Three Crows\r\nCDLINNECK           In-Neck Pattern\r\nCDLINVERTEDHAMMER   Inverted Hammer\r\nCDLKICKING          Kicking\r\nCDLKICKINGBYLENGTH  Kicking - bull/bear determined by the longer marubozu\r\nCDLLADDERBOTTOM     Ladder Bottom\r\nCDLLONGLEGGEDDOJI   Long Legged Doji\r\nCDLLONGLINE         Long Line Candle\r\nCDLMARUBOZU         Marubozu\r\nCDLMATCHINGLOW      Matching Low\r\nCDLMATHOLD          Mat Hold\r\nCDLMORNINGDOJISTAR  Morning Doji Star\r\nCDLMORNINGSTAR      Morning Star\r\nCDLONNECK           On-Neck Pattern\r\nCDLPIERCING         Piercing Pattern\r\nCDLRICKSHAWMAN      Rickshaw Man\r\nCDLRISEFALL3METHODS Rising/Falling Three Methods\r\nCDLSEPARATINGLINES  Separating Lines\r\nCDLSHOOTINGSTAR     Shooting Star\r\nCDLSHORTLINE        Short Line Candle\r\nCDLSPINNINGTOP      Spinning Top\r\nCDLSTALLEDPATTERN   Stalled Pattern\r\nCDLSTICKSANDWICH    Stick Sandwich\r\nCDLTAKURI           Takuri (Dragonfly Doji with very long lower shadow)\r\nCDLTASUKIGAP        Tasuki Gap\r\nCDLTHRUSTING        Thrusting Pattern\r\nCDLTRISTAR          Tristar Pattern\r\nCDLUNIQUE3RIVER     Unique 3 River\r\nCDLUPSIDEGAP2CROWS  Upside Gap Two Crows\r\nCDLXSIDEGAP3METHODS Upside/Downside Gap Three Methods\r\nCMO                 Chande Momentum Oscillator\r\nCORREL              Pearson's Correlation Coefficient (r)\r\nDEMA                Double Exponential Moving Average\r\nDX                  Directional Movement Index\r\nEMA                 Exponential Moving Average\r\nHT_DCPERIOD         Hilbert Transform - Dominant Cycle Period\r\nHT_DCPHASE          Hilbert Transform - Dominant Cycle Phase\r\nHT_PHASOR           Hilbert Transform - Phasor Components\r\nHT_SINE             Hilbert Transform - SineWave\r\nHT_TRENDLINE        Hilbert Transform - Instantaneous Trendline\r\nHT_TRENDMODE        Hilbert Transform - Trend vs Cycle Mode\r\nKAMA                Kaufman Adaptive Moving Average\r\nLINEARREG           Linear Regression\r\nLINEARREG_ANGLE     Linear Regression Angle\r\nLINEARREG_INTERCEPT Linear Regression Intercept\r\nLINEARREG_SLOPE     Linear Regression Slope\r\nMA                  All Moving Average\r\nMACD                Moving Average Convergence/Divergence\r\nMACDEXT             MACD with controllable MA type\r\nMACDFIX             Moving Average Convergence/Divergence Fix 12/26\r\nMAMA                MESA Adaptive Moving Average\r\nMAX                 Highest value over a specified period\r\nMAXINDEX            Index of highest value over a specified period\r\nMEDPRICE            Median Price\r\nMFI                 Money Flow Index\r\nMIDPOINT            MidPoint over period\r\nMIDPRICE            Midpoint Price over period\r\nMIN                 Lowest value over a specified period\r\nMININDEX            Index of lowest value over a specified period\r\nMINMAX              Lowest and highest values over a specified period\r\nMINMAXINDEX         Indexes of lowest and highest values over a specified period\r\nMINUS_DI            Minus Directional Indicator\r\nMINUS_DM            Minus Directional Movement\r\nMOM                 Momentum\r\nNATR                Normalized Average True Range\r\nOBV                 On Balance Volume\r\nPLUS_DI             Plus Directional Indicator\r\nPLUS_DM             Plus Directional Movement\r\nPPO                 Percentage Price Oscillator\r\nROC                 Rate of change : ((price/prevPrice)-1)*100\r\nROCP                Rate of change Percentage: (price-prevPrice)/prevPrice\r\nROCR                Rate of change ratio: (price/prevPrice)\r\nROCR100             Rate of change ratio 100 scale: (price/prevPrice)*100\r\nRSI                 Relative Strength Index\r\nSAR                 Parabolic SAR\r\nSAREXT              Parabolic SAR - Extended\r\nSMA                 Simple Moving Average\r\nSTDDEV              Standard Deviation\r\nSTOCH               Stochastic\r\nSTOCHF              Stochastic Fast\r\nSTOCHRSI            Stochastic Relative Strength Index\r\nSUM                 Summation\r\nT3                  Triple Exponential Moving Average (T3)\r\nTEMA                Triple Exponential Moving Average\r\nTRANGE              True Range\r\nTRIMA               Triangular Moving Average\r\nTRIX                1-day Rate-Of-Change (ROC) of a Triple Smooth EMA\r\nTSF                 Time Series Forecast\r\nTYPPRICE            Typical Price\r\nULTOSC              Ultimate Oscillator\r\nVAR                 Variance\r\nWCLPRICE            Weighted Close Price\r\nWILLR               Williams' %R\r\nWMA                 Weighted Moving Average\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}